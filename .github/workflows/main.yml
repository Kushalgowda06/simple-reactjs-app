name: Build and Deploy React App to EC2 via ECR

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  AWS_REGION: us-west-1
  AWS_ACCOUNT_ID: 361568250748
  ECR_REPOSITORY: react_application_demo
  CONTAINER_NAME: react-app
  CONTAINER_PORT: 80
  HOST_PORT: 80

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    name: Build Docker Image and Push to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials for OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -e
          echo "Removing old local image (if exists)..."
          docker rmi $ECR_REGISTRY/$ECR_REPOSITORY:latest || true
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: SSH into EC2 & Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          envs: AWS_REGION,AWS_ACCOUNT_ID,ECR_REPOSITORY,CONTAINER_NAME,CONTAINER_PORT,HOST_PORT
          script: |
            set -e
            echo "===== Starting Deployment ====="

            # Install Docker if missing
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo systemctl enable docker
              sudo systemctl start docker
            fi

            echo "Logging in to Amazon ECR..."
            aws ecr get-login-password --region $AWS_REGION | \
              sudo docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

            echo "Removing existing image (if exists)..."
            sudo docker rmi $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest || true

            echo "Pulling latest image..."
            sudo docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest

            echo "Stopping and removing old container..."
            sudo docker stop $CONTAINER_NAME || true
            sudo docker rm $CONTAINER_NAME || true

            echo "Cleaning dangling images..."
            sudo docker image prune -f

            echo "Running new container..."
            sudo docker run -d --name $CONTAINER_NAME -p $HOST_PORT:$CONTAINER_PORT --restart always \
              $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest

            echo "===== Deployment Complete ====="
            sudo docker ps
